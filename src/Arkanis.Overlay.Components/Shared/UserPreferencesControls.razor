@using System.Globalization
@using Arkanis.Overlay.Common.Extensions
@using Arkanis.Overlay.Common.Models
@inject IUserPreferencesManager UserPreferencesManager

<MudExpansionPanels MultiExpansion Outlined Square Dense>
    <MudExpansionPanel Expanded="@ExpandInitially" Dense>
        <TitleContent>
            General
        </TitleContent>
        <ChildContent>
            <MudForm @ref="_form">
                <MudGrid Class="py-4">
                    <MudItem xs="12">
                        <MudText Typo="@Typo.caption">Application</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch
                            @bind-Value="@Preferences.TerminateOnGameExit"
                            @bind-Value:after="@ValidateAsync"
                            Color="@Color.Success"
                            Label="Terminate on game exit"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch
                            @bind-Value="@Preferences.AutoStartWithBoot"
                            @bind-Value:after="@ValidateAsync"
                            Color="@Color.Success"
                            Label="Auto-start on system boot"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="@UpdateChannel"
                                   @bind-Value="@Preferences.UpdateChannel"
                                   @bind-Value:after="@ValidateAsync"
                                   Label="Update channel"
                                   Adornment="@Adornment.Start"
                                   AdornmentIcon="@MaterialSymbols.Outlined.SystemUpdateAlt"
                                   Text="@(Preferences.UpdateChannel.Name)"
                                   Required
                                   Dense>
                            @foreach (var channel in UpdateChannel.All)
                            {
                                <MudSelectItem Value="@channel"
                                               Disabled="@(!UpdateChannel.Available.Contains(channel))">
                                    <span>@channel.Name</span>
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <UpdateChannelDetails Model="@Preferences.UpdateChannel"/>
                        @if (UserPreferencesManager.CurrentPreferences.UpdateChannel != Preferences.UpdateChannel
                             && (UserPreferencesManager.CurrentPreferences.UpdateChannel.IsUnstable
                                 || Preferences.UpdateChannel.IsUnstable))
                        {
                            <MudText Typo="@Typo.caption" Color="@Color.Error">
                                Potential version downgrade will lead to <b>full wipe</b> of persistent local
                                storage.
                            </MudText>
                        }
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudStack Spacing="0">
                            <MudSwitch
                                @bind-Value="@Preferences.DisableAnalytics"
                                @bind-Value:after="@ValidateAsync"
                                Color="@Color.Error"
                                Label="Disable usage analytics"/>
                            @if (UserPreferencesManager.CurrentPreferences.DisableAnalytics != Preferences.DisableAnalytics)
                            {
                                <MudText Typo="@Typo.caption" Color="@Color.Warning">
                                    App restart may be necessary to fully apply
                                </MudText>
                            }
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="@Typo.caption">Overlay</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch
                            @bind-Value="@Preferences.BlurBackground"
                            @bind-Value:after="@ValidateAsync"
                            Color="@Color.Success"
                            Label="Blur overlay background"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="@Typo.caption">Locale</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="CultureInfo"
                                         Label="Overlay language"
                                         Adornment="@Adornment.Start"
                                         AdornmentIcon="@MaterialSymbols.Outlined.Language"
                                         @bind-Value="@Preferences.CustomCultureInfo"
                                         @bind-Value:after="@ValidateAsync"
                                         Text="@Preferences.CustomCultureInfo?.EnglishName"
                                         HelperText="@CultureSelectHelpText"
                                         SearchFunc="SearchCulture"
                                         ToStringFunc="@(culture => culture?.EnglishName)"
                                         Disabled
                                         Clearable
                                         Dense>
                            <ItemTemplate Context="culture">
                                @culture.EnglishName <code>(@culture.ThreeLetterISOLanguageName)</code>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="RegionInfo"
                                         Label="Display format region"
                                         Adornment="@Adornment.Start"
                                         AdornmentIcon="@MaterialSymbols.Outlined.Globe"
                                         @bind-Value="@Preferences.CustomRegionInfo"
                                         @bind-Value:after="@ValidateAsync"
                                         SearchFunc="SearchRegion"
                                         ToStringFunc="@(region => region?.EnglishName)"
                                         Clearable
                                         Dense>
                            <ItemTemplate Context="region">
                                @region.EnglishName <code>(@region.ThreeLetterISORegionName)</code>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12">
                        <KeyboardShortcutInput
                            Label="Overlay toggle shortcut"
                            @bind-Value="@Preferences.InGameLaunchShortcut"
                            @bind-Value:after="@ValidateAsync"
                            Required/>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel Dense>
        <TitleContent>
            Cache management
        </TitleContent>
        <ChildContent>
            <CacheManagement/>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code
{

    private MudForm? _form;

    private static readonly CultureInfo[] Cultures = CultureInfo.GetCultures(CultureTypes.NeutralCultures)
        .Where(culture => !string.IsNullOrWhiteSpace(culture.ThreeLetterISOLanguageName))
        .OrderBy(culture => culture.EnglishName)
        .Distinct()
        .ToArray();

    private static readonly RegionInfo[] Regions = CultureInfo.GetCultures(CultureTypes.SpecificCultures)
        .Select(culture => new RegionInfo(culture.Name))
        .Where(region => !string.IsNullOrWhiteSpace(region.ThreeLetterISORegionName))
        .OrderBy(region => region.EnglishName)
        .Distinct()
        .ToArray();

    private string CultureSelectHelpText
        => Preferences.CustomCultureInfo is null
            ? $"Using system culture {Preferences.ActiveCultureInfo.EnglishName}"
            : $"Using {Preferences.ActiveCultureInfo.EnglishName}";

    [Parameter]
    [EditorRequired]
    public required UserPreferences Preferences { get; set; }

    [Parameter]
    public bool IsValid { get; set; }

    [Parameter]
    public EventCallback<bool> IsValidChanged { get; set; }

    [Parameter]
    public bool ExpandInitially { get; set; }

    private async Task ValidateAsync()
    {
        if (_form is not null)
        {
            await _form.Validate();
        }

        IsValid = _form?.IsValid ?? false;
        await IsValidChanged.InvokeAsync(IsValid);
    }

    private Task<IEnumerable<CultureInfo>> SearchCulture(string? searchTerm, CancellationToken ct)
        => Task.FromResult(Cultures.FuzzySearch(culture => culture.EnglishName, searchTerm ?? string.Empty));

    private Task<IEnumerable<RegionInfo>> SearchRegion(string? searchTerm, CancellationToken ct)
        => Task.FromResult(Regions.FuzzySearch(culture => culture.EnglishName, searchTerm ?? string.Empty));

}
