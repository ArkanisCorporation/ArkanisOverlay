@using System.Collections.Concurrent
@using Microsoft.AspNetCore.Components.Routing
@implements IDisposable
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager
@inject OverlayModules OverlayModules


<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    .navigation-tabs {
        .mud-tab.mud-tab-panel {
            min-width: initial !important;
            padding-left: 16px;
            padding-right: 16px;
        }

        .mud-chip {
            margin: 0;
            height: 20px;
        }
    }
</style>

<MudTabs Class="with-badges navigation-tabs"
         ActivePanelIndex="@ActiveModuleIndex">
    @foreach (var (moduleIndex, module) in OverlayModules.GetAll().Index())
    {
        var moduleShortcut = GetKeyForIndex(moduleIndex);
        var isModuleActive = IsActive(module);
        var isShortcutAvailable = !isModuleActive && !module.Disabled;
        var updateCount = GetUpdateCount(module);

        <MudTabPanel @key="@module.Url"
                     Icon="@module.Icon"
                     OnClick="@GetActivationCallbackFor(module)"
                     Disabled="@module.Disabled">
            <TabWrapperContent>
                <KeyboardShortcutBadge @key="@module.Name"
                                       Key="@moduleShortcut"
                                       IsActive="@isShortcutAvailable"
                                       OnKeyPress="@GetActivationCallbackFor(module)"
                                       Origin="@KeybindsOrigin"
                                       Elevation="4"
                                       DoNotOverlap="@DoNotOverlapKeybinds">
                    @context
                </KeyboardShortcutBadge>
            </TabWrapperContent>
            <TabContent>
                <MudStack AlignItems="@AlignItems.Center"
                          Spacing="3"
                          Row>
                    <MudIcon
                        Icon="@module.Icon"/>
                    @module.Name
                    @if (updateCount > 0)
                    {
                        <MudChip
                            Size="@Size.Small"
                            Value="@updateCount"
                            Color="@Color.Warning"/>
                    }
                </MudStack>
            </TabContent>
        </MudTabPanel>
    }
</MudTabs>

@code
{

    private Timer? _timer;
    private readonly ConcurrentDictionary<string, int> _moduleUpdates = [];

    private int ActiveModuleIndex
        => OverlayModules.GetAll()
            .Index()
            .Where(x => IsActive(x.Value))
            .Select(x => x.Key)
            .First();

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string Style { get; set; } = string.Empty;

    [Parameter]
    public bool Horizontal { get; set; }

    [Parameter]
    public Origin KeybindsOrigin { get; set; } = Origin.TopRight;

    [Parameter]
    public bool DoNotOverlapKeybinds { get; set; }

    [Parameter]
    public Origin UpdatesOrigin { get; set; } = Origin.TopCenter;

    [Parameter]
    public bool DoNotOverlapUpdates { get; set; }

    private bool IsActive(OverlayModules.Entry module)
        => NavigationManager.Uri.StartsWith(NavigationManager.ToAbsoluteUri(module.Url).ToString());

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _timer = new Timer(UpdateDataAsync, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
        NavigationManager.LocationChanged += OnLocationChangedAsync;
    }

    private async void UpdateDataAsync(object? state)
    {
        try
        {
            async Task<bool> LoadAsync(OverlayModules.Entry entry)
            {
                var previousValue = GetUpdateCount(entry);
                var currentValue = await entry.GetUpdateCountAsync(ServiceProvider);
                _moduleUpdates[entry.Name] = currentValue;
                return previousValue != currentValue;
            }

            var updateTasks = OverlayModules.GetAll().Select(LoadAsync);
            await Task.WhenAll(updateTasks);
        }
        catch (Exception)
        {
            // ignore
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnLocationChangedAsync(object? _, LocationChangedEventArgs e)
        => UpdateDataAsync(null);

    private KeyboardKey GetKeyForIndex(int index)
        => index < 12
            ? KeyboardKey.F1 + index
            : KeyboardKey.Unknown;

    private EventCallback GetActivationCallbackFor(OverlayModules.Entry module)
        => EventCallback.Factory.Create(this, () => Activate(module));

    private void Activate(OverlayModules.Entry module)
        => NavigationManager.NavigateTo(module.Url);

    private int GetUpdateCount(OverlayModules.Entry module)
        => _moduleUpdates.GetValueOrDefault(module.Name);

    public void Dispose()
    {
        _timer?.Dispose();
        NavigationManager.LocationChanged -= OnLocationChangedAsync;
    }

}
