@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IOverlayEventProvider OverlayEventProvider
@inject IJSRuntime JsRuntime

<div class="focus-region @Class"
     style="@Style"
     @ref="@ContainerElement"
     @onfocusin="@OnFocusReceived"
     @onfocusout="@OnFocusLost">
    @ChildContent(CurrentContext)
</div>

@code
{

    private JsComponentInterop<FocusRegion>? _interop;

    [Parameter]
    [EditorRequired]
    public required RenderFragment<Context> ChildContent { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    public bool HasFocus { get; private set; }

    public ElementReference ContainerElement { get; private set; }

    private Context CurrentContext
        => new(this);

    public async Task FocusAsync()
        => await ContainerElement.MudFocusFirstAsync();

    private async Task OnFocusReceived()
    {
        HasFocus = true;
        await InvokeAsync(InitializeInteropAsync);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OverlayEventProvider.OverlayBlurred += OnOverlayOutOfFocus;
    }

    private async void OnOverlayOutOfFocus(object? sender, EventArgs e)
    {
        try
        {
            await OnFocusLost();
        }
        catch (Exception)
        {
            // ignored
        }
    }

    private async Task OnFocusLost()
    {
        HasFocus = false;
        await InvokeAsync(StateHasChanged);
        await InvokeAsync(DisposeInteropAsync);
    }

    private async Task InitializeInteropAsync()
    {
        _interop = JsRuntime.CreateLifetimeInterop(this);
        await _interop.InitializeAsync(ContainerElement);
    }

    private async Task DisposeInteropAsync()
    {
        if (_interop is not null)
        {
            await _interop.DisposeAsync();
            _interop = null;
        }
    }

    public record Context(FocusRegion SourceRegion)
    {
        public bool ContainsFocus
            => SourceRegion.HasFocus;

        public bool DoesNotContainFocus
            => !ContainsFocus;
    }

    public async ValueTask DisposeAsync()
    {
        OverlayEventProvider.OverlayBlurred -= OnOverlayOutOfFocus;
        await DisposeInteropAsync();
    }
}
