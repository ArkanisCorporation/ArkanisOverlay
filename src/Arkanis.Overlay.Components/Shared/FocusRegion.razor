@inject EventInterop EventInterop

<div class="@Class"
     style="@Style"
     @ref="@ContainerElement"
     @onfocusin="@FocusReceived"
     @onfocusout="@FocusLost">
    @ChildContent(CurrentContext)
</div>

@code
{

    [Parameter]
    [EditorRequired]
    public required RenderFragment<Context> ChildContent { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    public bool HasFocus { get; private set; }

    public ElementReference ContainerElement { get; private set; }

    private Context CurrentContext
        => new(this);

    public async Task FocusAsync()
    {
        await ContainerElement.MudFocusFirstAsync();
    }

    private void FocusReceived()
        => HasFocus = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await EventInterop.RegisterWindowEventHandlerAsync("blur", EventInterop.CreateHandler(FocusLost));
        }
    }

    private async Task FocusLost()
    {
        HasFocus = false;
        await InvokeAsync(StateHasChanged);
    }

    public record Context(FocusRegion SourceRegion)
    {
        public bool ContainsFocus
            => SourceRegion.HasFocus;

        public bool DoesNotContainFocus
            => !ContainsFocus;
    }

}
