@using Arkanis.Overlay.Domain.Abstractions.Game
@using Arkanis.Overlay.Domain.Models
@using Arkanis.Overlay.Domain.Models.Trade
@inject IMarketPriceProvider MarketPriceProvider
@inject IPurchasePriceProvider PurchasePriceProvider
@inject ISalePriceProvider SalePriceProvider
@inject IRentPriceProvider RentPriceProvider

<MudStack Class="flex-1"
          Spacing="4"
          AlignItems="@AlignItems.Center"
          Justify="@Justify.FlexEnd"
          Style="height: 46px;"
          Row>
    @if (Model is IGamePurchasable)
    {
        <PriceTagInfo
            Label="Min buy"
            Model="@PurchasePriceTag?.Min"
            Color="@UiConstants.PurchaseColor"/>
    }
    @if (Model is IGameSellable)
    {
        <PriceTagInfo
            Label="Max sell"
            Model="@SalePriceTag?.Max"
            Color="@UiConstants.SellColor"/>
    }
    @if (Model is IGameRentable)
    {
        <PriceTagInfo
            Label="Min rent"
            Model="@RentPriceTag?.Min"
            Color="@UiConstants.RentColor"/>
    }
    @if (MarketPriceTag?.Min != PriceTag.Unknown || MarketPriceTag?.Max != PriceTag.Unknown)
    {
        <MudStack Spacing="0">
            <PriceTagInfo
                Label="Market"
                Model="@MarketPriceTag?.Min"
                Color="@UiConstants.PurchaseColor"/>
            <PriceTagInfo
                Model="@MarketPriceTag?.Max"
                Color="@UiConstants.SellColor"/>
        </MudStack>
    }
</MudStack>

@code
{

    [CascadingParameter]
    public OverlaySearchContext? SearchContext { get; set; }

    [Parameter]
    public required IGameEntity Model { get; set; }

    private Bounds<PriceTag>? MarketPriceTag { get; set; }

    private Bounds<PriceTag>? PurchasePriceTag { get; set; }

    private Bounds<PriceTag>? SalePriceTag { get; set; }

    private Bounds<PriceTag>? RentPriceTag { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        PurchasePriceTag = null;
        SalePriceTag = null;
        RentPriceTag = null;
        await base.OnParametersSetAsync();

        MarketPriceTag ??= await MarketPriceProvider.GetMarketPriceTagAsync(Model);

        if (Model is IGamePurchasable purchasable)
        {
            PurchasePriceTag = SearchContext?.CurrentLocation is { } location
                ? await PurchasePriceProvider.GetPriceTagAtAsync(purchasable, location)
                : purchasable.LatestPurchasePrices;
        }

        if (Model is IGameSellable sellable)
        {
            SalePriceTag = SearchContext?.CurrentLocation is { } location
                ? await SalePriceProvider.GetPriceTagAtAsync(sellable, location)
                : sellable.LatestSalePrices;
        }

        if (Model is IGameRentable rentable)
        {
            RentPriceTag = SearchContext?.CurrentLocation is { } location
                ? await RentPriceProvider.GetPriceTagAtAsync(rentable, location)
                : rentable.LatestRentPrices;
        }
    }

}
