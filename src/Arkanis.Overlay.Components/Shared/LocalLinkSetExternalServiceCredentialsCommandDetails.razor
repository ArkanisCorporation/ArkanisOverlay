@using System.Security.Claims
@using Arkanis.Overlay.Common.Extensions
@using Arkanis.Overlay.Common.Services
@using Arkanis.Overlay.Infrastructure.Services
@using Arkanis.Overlay.LocalLink.Models.Commands
@using FluentResults
@implements IUserConsentDialogService.IContent
@inject ExternalAuthenticatorProvider ExternalAuthenticatorProvider

@if (_authTask is null)
{
    <MudAlert Severity="@Severity.Info">
        An external application wants to change configuration and connect an account to your Overlay installation.
    </MudAlert>
}
else
{
    <MudAlert Severity="@Severity.Info">
        An external application wants to change configuration and connect
        <Tooltip Text="@_authTask.ProviderInfo.Description">
            @_authTask.ProviderInfo.DisplayName
        </Tooltip>
        account to your Overlay installation.
    </MudAlert>
}
@if (_authResult?.IsFailed == true)
{
    <MudAlert Severity="@Severity.Error">
        Authentication failed with the following errors:
        <ul class="pl-4">
            @foreach (var error in _authResult.Errors)
            {
                <li>@error.Message</li>
            }
        </ul>
    </MudAlert>
}
else
{
    <MudStack AlignItems="@AlignItems.Center" Class="px-12" Row>
        <ExternalAccountIdentityDetails
            Model="@_authResult?.ValueOrDefault"/>
        <MudSpacer/>
        <ExternalAuthenticatorDetails
            Model="@_authTask?.ProviderInfo"/>
    </MudStack>
}

@code
{

    private Guid _currentOperationId = Guid.NewGuid();

    private ExternalAuthenticator.AuthTaskBase? _authTask;
    private Result<ClaimsIdentity>? _authResult;

    [Parameter]
    public SetExternalServiceCredentialsCommand? Model { get; set; }

    [Parameter]
    [EditorRequired]
    public required IUserConsentDialogService.Context DialogContext { get; set; }

    [Parameter]
    public EventCallback<IUserConsentDialogService.Context> DialogContextChanged { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (_currentOperationId == Model?.Id)
        {
            return;
        }

        _currentOperationId = Model?.Id ?? Guid.NewGuid();
        await AllowConsentAsync(false);

        if (Model is null)
        {
            _authTask = null;
            return;
        }

        try
        {
            _authTask = ExternalAuthenticatorProvider.AuthenticateWith(Model.Credentials, CancellationToken.None);
            _authResult = await _authTask;
            await AllowConsentAsync(_authResult.IsSuccess);
        }
        catch (Exception ex)
        {
            _authResult = Result.Fail(ex.ToError());
            await AllowConsentAsync(false);
        }
    }

    private async Task AllowConsentAsync(bool allow = true)
        => await DialogContextChanged.InvokeAsync(DialogContext with { CanConsent = allow });

}
