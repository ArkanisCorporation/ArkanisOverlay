@using Arkanis.Overlay.Components.Services
@using Arkanis.Overlay.Domain.Models.Keyboard
@implements IDisposable
@inject KeyboardProxy GlobalKeyboardProxy

<MudBadge Origin="@Origin"
          Content="@Key.ToString()"
          Class="@Class"
          BadgeClass="@BadgeClass"
          Style="@Style"
          Color="@Color"
          Visible="@IsActive"
          Elevation="8"
          Overlap>
    @ChildContent
</MudBadge>

@code
{

    [Parameter]
    [EditorRequired]
    public required KeyboardKey Key { get; set; }

    [Parameter]
    [EditorRequired]
    public required EventCallback OnKeyPress { get; set; }

    [Parameter]
    [EditorRequired]
    public required RenderFragment ChildContent { get; set; }

    [Parameter]
    public KeyboardProxy? KeyboardEventProxy { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? BadgeClass { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Tertiary;

    [Parameter]
    public Origin Origin { get; set; } = Origin.TopRight;

    [Parameter]
    public bool IsActive { get; set; } = true;

    private KeyboardProxy UsedKeyboardProxy
        => KeyboardEventProxy ?? GlobalKeyboardProxy;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UsedKeyboardProxy.OnKeyDown += OnKeyDown;
    }

    private async void OnKeyDown(object? sender, KeyboardKey keyboardKey)
    {
        if (IsActive && keyboardKey == Key)
        {
            await InvokeAsync(() => OnKeyPress.InvokeAsync(keyboardKey));
        }
    }

    public void Dispose()
        => UsedKeyboardProxy.OnKeyDown -= OnKeyDown;

}
