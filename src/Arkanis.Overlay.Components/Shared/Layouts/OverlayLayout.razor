@inherits LayoutComponentBase
@using Arkanis.Overlay.Domain.Models.Analytics
@using Arkanis.Overlay.Domain.Models.Keyboard
@using MoreLinq.Extensions
@implements IDisposable
@layout MainLayout

@inject NavigationManager NavigationManager
@inject OverlayModules OverlayModules
@inject IOverlayEventProvider OverlayEventProvider
@inject IAnalyticsEventReporter AnalyticsEventReporter
@inject IUserPreferencesProvider UserPreferencesProvider

<style>
    body {
        background-color: transparent;
    }
</style>

<MudAppBar Style="background: var(--mud-palette-surface);"
           Fixed="@false"
           Dense>

    <MudStack Class="w-100"
              Justify="@Justify.SpaceBetween"
              AlignItems="@AlignItems.Center"
              Row>
        <MudStack Style="width: 20vw" Row>
            <SectionOutlet SectionId="@RenderSections.AppBar.AppMenu"/>
        </MudStack>

        <MudStack Row>
            @foreach (var (moduleIndex, module) in OverlayModules.GetAll().Index())
            {
                var moduleShortcut = GetKeyForIndex(moduleIndex);
                var isModuleActive = IsActive(module);
                <KeyboardShortcutBadge Key="@moduleShortcut"
                                       IsActive="@(!isModuleActive)"
                                       OnKeyPress="@GetActivationCallbackFor(module)"
                                       Origin="@Origin.BottomCenter"
                                       Elevation="4"
                                       DoNotOverlap>
                    <MudButton Variant="@Variant.Filled"
                               Color="@Color.Primary"
                               Size="@Size.Small"
                               StartIcon="@module.Icon"
                               OnClick="@GetActivationCallbackFor(module)"
                               Disabled="@isModuleActive">
                        @module.Name
                    </MudButton>
                </KeyboardShortcutBadge>
            }
        </MudStack>

        <MudStack Style="width: 20vw"
                  Justify="@Justify.FlexEnd"
                  AlignItems="@AlignItems.Center"
                  Row>
            <SectionOutlet SectionId="@RenderSections.AppBar.UserMenu"/>
            <MudIconButton
                Icon="@MaterialSymbols.Outlined.Notifications"
                Disabled/>
            <MudAvatar
                Size="@Size.Small"/>
        </MudStack>
    </MudStack>
</MudAppBar>

<div style="@ContainerBlurCss">
    <div style="height: calc(100vh - 48px); overflow-y: scroll">
        @Body
    </div>
</div>

@code
{

    private string ContainerBlurCss
        => UserPreferencesProvider.CurrentPreferences.BlurBackground
            // calc(100% - 48px) offsets the app bar height
            ? "min-height: calc(100% - 48px); backdrop-filter: blur(12px);"
            : "";

    private bool IsActive(OverlayModules.Entry module)
        => NavigationManager.Uri.StartsWith(NavigationManager.ToAbsoluteUri(module.Url).ToString());

    private KeyboardKey GetKeyForIndex(int index)
        => index < 12
            ? KeyboardKey.F1 + index
            : KeyboardKey.Unknown;

    private EventCallback GetActivationCallbackFor(OverlayModules.Entry module)
        => EventCallback.Factory.Create(this, () => Activate(module));

    private void Activate(OverlayModules.Entry module)
        => NavigationManager.NavigateTo(module.Url);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        OverlayEventProvider.OverlayShown += OnOverlayShown;
        OverlayEventProvider.OverlayHidden += OnOverlayHidden;
        UserPreferencesProvider.ApplyPreferences += OnPreferencesChanged;
    }

    private void OnPreferencesChanged(object? _, UserPreferences e)
        => InvokeAsync(StateHasChanged);

    private void OnOverlayShown(object? _, EventArgs e)
        => AnalyticsEventReporter.TrackEventAsync(new OverlayShownEvent());

    private void OnOverlayHidden(object? _, EventArgs e)
        => AnalyticsEventReporter.TrackEventAsync(new OverlayHiddenEvent());

    public void Dispose()
    {
        OverlayEventProvider.OverlayShown -= OnOverlayShown;
        OverlayEventProvider.OverlayHidden -= OnOverlayHidden;
        UserPreferencesProvider.ApplyPreferences -= OnPreferencesChanged;
    }

}
