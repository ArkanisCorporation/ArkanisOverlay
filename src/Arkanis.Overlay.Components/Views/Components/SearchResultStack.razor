@using Arkanis.Overlay.Domain.Abstractions.Game
@using Arkanis.Overlay.Domain.Models.Search
@using MoreLinq
@using Microsoft.AspNetCore.Components.Web.Virtualization

<QuickAccessContainer QuerySelector=".search-result-container"
                      ContentVirtualized="@Virtualize">
    <MudStack Class="mt-10 w-100" Style="width: fit-content; min-width: 60vw;">
        @if (Virtualize)
        {
            <Virtualize Items="@Model.GameEntities.Distinct().ToList()"
                        ItemSize="66"
                        OverscanCount="25"
                        Context="result">
                <SearchResultItem
                    @key="@result.GetHashCode()"
                    Model="@result.Subject"/>
            </Virtualize>
        }
        else
        {
            @foreach (var result in BatchedSearchResults.Distinct())
            {
                <SearchResultItem
                    @key="@result.GetHashCode()"
                    Model="@result.Subject"/>
            }
        }
    </MudStack>
</QuickAccessContainer>

@code
{

    [Parameter]
    [EditorRequired]
    public GameEntitySearchResults Model { get; set; } = GameEntitySearchResults.Empty;

    [Parameter]
    public bool Virtualize { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!Virtualize)
        {
            BatchedSearchResults = Model.GameEntities.Take(50).ToList();
            await InvokeAsync(StateHasChanged);
            await Task.Delay(500);

            foreach (var resultBatch in Model.GameEntities.Batch(500))
            {
                BatchedSearchResults.AddRange(resultBatch);
                await InvokeAsync(StateHasChanged);
                await Task.Delay(500);
            }
        }
    }

    private List<SearchMatchResult<IGameEntity>> BatchedSearchResults { get; set; } = [];

}
