@namespace Arkanis.Overlay.Components.Views.Components
@using Arkanis.Overlay.Domain.Abstractions.Services
@using Arkanis.Overlay.Domain.Enums
@using Arkanis.Overlay.Domain.Models.IconSelection
@using Arkanis.Overlay.Components.Helpers
@inject IIconService IconService

@if (IconSelection is not null)
{
    @if (IconSelection.Type == IconType.Custom)
    {
        <!-- Custom icon rendering - could be SVG, image, or other custom implementation -->
        <div class="@Class" style="@Style">
            <i class="custom-icon" data-icon="@IconSelection.IconName"></i>
        </div>
    }
    else
    {
        <!-- MudBlazor icon for Material Icons and Material Symbols -->
        <MudIcon Icon="@GetMudBlazorIconString()" Class="@Class" Style="@Style" />
    }
}
else if (!string.IsNullOrEmpty(IconName))
{
    <!-- Fallback to string-based icon name -->
    <MudIcon Icon="@MudBlazorIconMapping.GetIconString(IconName)" Class="@Class" Style="@Style" />
}
else
{
    <!-- Default icon -->
    <MudIcon Icon="@MudBlazorIconMapping.DefaultIconString" Class="@Class" Style="@Style" />
}

@code {
    [Parameter]
    public IconSelectionObject? IconSelection { get; set; }

    [Parameter]
    public string? IconName { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    private string GetMudBlazorIconString()
    {
        if (IconSelection is not null)
        {
            return MudBlazorIconMapping.GetIconString(IconSelection);
        }

        return MudBlazorIconMapping.DefaultIconString;
    }
}


