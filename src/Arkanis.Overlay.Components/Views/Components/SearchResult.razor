@using Arkanis.Overlay.Domain.Abstractions.Game
@using Arkanis.Overlay.Domain.Models.Keyboard
<FocusRegion @ref="_focusRegion" Class="search-result-container">
    <MudPaper Class="w-100 search-result px-4 py-2 focus" tabindex="0">
        <KeyboardShortcutBadge Key="@(KeyboardShortcut)"
                               Origin="@Origin.TopLeft"
                               Class="w-100"
                               IsActive="@(KeyboardShortcutActive)"
                               OnKeyPress="@(() => context.SourceRegion.FocusAsync())">
            <MudStack Class="w-100"
                      Justify="@Justify.FlexStart"
                      AlignItems="@AlignItems.Center"
                      Row>

                <MudIcon Icon="@IconPicker.PickIconFor(Model.EntityCategory)"></MudIcon>
                <MudDivider Vertical="true" FlexItem="true"></MudDivider>

                <div class="my-n2">
                    <GameEntityNameLabel Model="@Model.Name"/>
                </div>

                <GameEntitySearchDetails Model="@Model"/>
                <GameEntitySearchControls
                    Model="@Model"
                    IsFocused="@context.ContainsFocus"/>
            </MudStack>
        </KeyboardShortcutBadge>
    </MudPaper>
</FocusRegion>

@code
{

    private KeyboardKey KeyboardShortcut
        => _visibility?.IsVisible switch
        {
            true => _visibility switch
            {
                { Index: < 9 } => KeyboardKey.Digit1 + _visibility!.Index,
                { Index: 9 } => KeyboardKey.Digit0,
                _ => KeyboardKey.Unknown,
            },
            _ => KeyboardKey.Unknown,
        };

    private bool KeyboardShortcutActive
        => KeyboardShortcut is not KeyboardKey.Unknown && (!_focusRegion?.HasFocus ?? false);

    private QuickAccessContainer.VisibilityInfo? _visibility;
    private FocusRegion? _focusRegion;

    [CascadingParameter]
    public required QuickAccessContainer Container { get; set; }

    [Parameter]
    [EditorRequired]
    public required IGameEntity Model { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Container.RegisterAsync(_focusRegion!.ContainerElement, EventCallback.Factory.Create<QuickAccessContainer.VisibilityInfo>(this, OnVisibilityChanged));
        }
    }

    private async Task OnVisibilityChanged(QuickAccessContainer.VisibilityInfo info)
    {
        _visibility = info;
        await InvokeAsync(StateHasChanged);
    }

}
