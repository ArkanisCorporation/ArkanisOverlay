@using System.Text
@using Arkanis.Overlay.Components.Helpers
@using Arkanis.Overlay.Components.Shared.Dialogs
@using Arkanis.Overlay.Components.Views.Components
@using Arkanis.Overlay.Domain.Abstractions.Game
@using Arkanis.Overlay.Domain.Abstractions.Services
@using Arkanis.Overlay.Domain.Enums
@using Arkanis.Overlay.Domain.Models.Game
@using Arkanis.Overlay.Domain.Models.Search
@using Humanizer
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@layout OverlayLayout

@inject ILogger<OverlayView> Logger
@inject IDialogService DialogService
@inject IOverlayControls OverlayControls
@inject ISearchService SearchService

<script>
    window.onkeydown = ev => {
        return;
        console.debug("KeyDown", ev);
        if (ev.key === "Escape") {
            DotNet.invokeMethodAsync("@((MarkupString)nameof(Arkanis))", "ClickAwayHide");
        }

        // if (ev.keyCode >= 38 && ev.keyCode <= 40) {
        //     debugger;
        // }

        let target = ev.target;

        if (target.id === "searchBox") {
            if (ev.keyCode !== 40) {
                return;
            }

            document.querySelector('.search-result')?.focus();
        } else {
            let searchBox = document.getElementById('searchBox')

            switch (ev.keyCode) {
                case 38: // up
                    (ev.target.previousElementSibling || searchBox)?.focus();
                    break;
                case 40: // down
                    ev.target.nextElementSibling.focus();
                    break;

                case 37: // left
                    (
                        target.tabIndex === 1 ?
                            (
                                target.parentElement.querySelector('[tabindex="1"]:has(~ :focus)')
                                || target.closest('.search-result')
                            ) : searchBox
                    )?.focus();
                    break;

                case 39: // right
                    (
                        target.tabIndex === 0 ?
                            target.querySelector('[tabindex="1"]') :
                            target.parentElement.querySelector(':focus ~ [tabindex="1"]')
                    )?.focus();
                    break;

                case 13: // enter
                case 32: // space
                    if (target.id !== "searchBox") {
                        break;
                    }

                <!--suppress FallThroughInSwitchStatementJS -->
                default:
                    searchBox?.focus();
                    searchBox?.select();
                    return; // do not prevent default so that the search box receives the key input
            }
        }

        ev.preventDefault();
    };
</script>

<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    #clickAwayBackground {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    #searchContainer {
        position: sticky;
        z-index: 1;

        .mud-input-control {
            margin: 0;
            width: 60vw;
        }

        .mud-input,
        .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
            font-size: 2vh; /* 1 rem is default */
        }

        .mud-icon-size-medium {
            font-size: 2.5vh;
        }
    }

    .focus:focus {
        outline: 2px solid var(--mud-palette-primary);
    }

    .mud-snackbar {
        min-width: 0;
    }

    .mud-icon-button.focus {
        border-radius: 0;
    }
</style>

<div id="clickAwayBackground" @onmousedown="ClickAwayHide">
    <div class="badge-container uex">
        <a href="https://uexcorp.space/" target="_blank" rel="noopener noreferrer">
            <div class="badge">
                <img src="@LinkHelper.GetPathToAsset("/img/uex-api-badge-powered.png")"
                     alt="Powered by UEX API"/>
            </div>
        </a>
    </div>

    <div class="badge-container author">
        <a href="https://discord.com/users/174617873182883841" target="_blank" rel="noopener noreferrer">
            <div class="badge author">
                <img src="@LinkHelper.GetPathToAsset("/img/created-by-badge.png")"
                     alt="Created by Delta"/>
            </div>
        </a>
    </div>
</div>

<MudIconButton
    Color="@Color.Primary"
    Icon="@MaterialSymbols.Outlined.Settings"
    OnClick="@OpenUserOptionsDialogAsync"
    Style="position: absolute; top: 2rem; right: 2rem"/>

<MudStack id="searchContainer" Class="d-flex justify-center align-center flex-grow-1" Elevation="0">
    <div style="padding: 7.5vh"></div>
    <MudFocusTrap DefaultFocus="@DefaultFocus.FirstChild">
        <MudPaper Style="position: sticky; top: 0; z-index: 10">
            <MudTextField
                id="searchBox"
                @ref="_searchBox"
                T="string"
                @bind-Value="SearchText"
                @bind-Value:after="SearchAsync"
                Variant="Variant.Outlined"
                Adornment="Adornment.End"
                AdornmentIcon="@Icons.Material.Filled.Search"
                AdornmentColor="Color.Secondary"
                HelperText="@ShortcutsText"
                AutoFocus
                Immediate/>
        </MudPaper>

        @if (SearchResults.GameEntities.Count > 0)
        {
            <MudChip T="string" Variant="@Variant.Text">
                Found @SearchResults.GameEntities.Count results in @SearchResults.SearchTime.Humanize()
            </MudChip>

            <MudStack Class="mt-10 w-100" Style="width: fit-content; min-width: 60vw;">
                <MudVirtualize Items="@SearchResults.GameEntities" ItemSize="66" Enabled>
                    @{
                        var entity = context.Subject;
                    }
                    <MudPaper @key="@context.Subject.GetHashCode()"
                              Class="w-100 search-result px-4 py-2 focus" tabindex="0">
                        <MudStack Class="w-100"
                                  Justify="@Justify.FlexStart"
                                  AlignItems="@AlignItems.Center"
                                  Row>

                            <MudIcon Icon="@IconPicker.PickIconFor(entity.EntityCategory)"></MudIcon>
                            <MudDivider Vertical="true" FlexItem="true"></MudDivider>

                            <h1 class="flex-1">@name</h1>
                        </MudStack>
                    </MudPaper>
                </MudVirtualize>
            </MudStack>
        }
    </MudFocusTrap>
</MudStack>

@code
{
    private const StringSplitOptions SplittingOptions
        = StringSplitOptions.RemoveEmptyEntries
          | StringSplitOptions.TrimEntries;

    private static CancellationTokenSource _searchCancellation = new();
    private static MudTextField<string>? _searchBox;

    private readonly Dictionary<string, EntityCategorySearch> _categorySearchShortcuts = new()
    {
        [":i"] = new EntityCategorySearch(GameEntityCategory.Item),
        [":c"] = new EntityCategorySearch(GameEntityCategory.Commodity),
        [":s"] = new EntityCategorySearch(GameEntityCategory.SpaceShip),
        [":g"] = new EntityCategorySearch(GameEntityCategory.GroundVehicle),
        [":l"] = new EntityCategorySearch(GameEntityCategory.Location),
        [":f"] = new EntityCategorySearch(GameEntityCategory.Company),
    };

    private string ShortcutsText
        => new StringBuilder().AppendJoin(", ", _categorySearchShortcuts.Select(search => $"{search.Key} {search.Value.Category.Humanize().Pluralize()}")).ToString();

    private string SearchText { get; set; } = "";

    private GameEntitySearchResults SearchResults { get; set; } = GameEntitySearchResults.Empty;

    [JSInvokable("ClickAwayHide")]
    public void ClickAwayHide()
    {
        OverlayControls.HideAsync();
    }

    private async Task SearchAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SearchText))
            {
                Logger.LogDebug("Search text is empty, no search performed");
                SearchResults = GameEntitySearchResults.Empty;
                return;
            }

            var searchQueries = SearchText.Split(',', SplittingOptions)
                .SelectMany(searchPart => searchPart.StartsWith(':')
                    ? searchPart.Split(' ', 2, SplittingOptions)
                    : [searchPart]
                )
                .Select(searchPart => searchPart.StartsWith(':')
                    ? _categorySearchShortcuts.GetValueOrDefault(searchPart) ?? EmptySearch.Instance
                    : FuzzyStringSearch.Create(searchPart))
                .Where(search => search is not EmptySearch)
                .ToList();

            await _searchCancellation.CancelAsync();
            _searchCancellation = new CancellationTokenSource();
            SearchResults = await SearchService.SearchAsync(searchQueries, _searchCancellation.Token);
        }
        catch (OperationCanceledException)
        {
            // search has been cancelled (possibly by another search)
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during search");
        }
    }

    private async Task OnResultClick(SearchMatchResult<IGameEntity> result)
    {
        // TODO: Show detailed prices in a dialog or expand the list item
    }

    private async Task OpenUserOptionsDialogAsync()
    {
        await UserPreferencesEditDialog.ShowAsync(DialogService);
    }
}
