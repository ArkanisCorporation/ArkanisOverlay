@using System.Text
@using Arkanis.Overlay.Components.Shared.Dialogs
@using Arkanis.Overlay.Components.Views.Components
@using Arkanis.Overlay.Domain.Enums
@using Arkanis.Overlay.Domain.Models.Analytics
@using Arkanis.Overlay.Domain.Models.Keyboard
@using Arkanis.Overlay.Domain.Models.Search
@using Humanizer
@using Microsoft.Extensions.Logging
@layout OverlayLayout

@inject ILogger<OverlayView> Logger
@inject IDialogService DialogService
@inject IOverlayControls OverlayControls
@inject ISearchService SearchService
@inject IUserPreferencesProvider UserPreferencesProvider
@inject IGlobalAnalyticsReporter GlobalAnalyticsReporter
@inject EventInterop EventInterop

<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    .controls-container {
        position: sticky;
        width: 100%;
        top: 0;
        z-index: 100;

        & > .controls-inner-wrapper {
            position: absolute;
            height: 100vh;
            display: flex;
            flex-direction: column;

            &.right {
                right: 0;
                align-items: flex-end;
            }

            &.left {
                left: 0;
                align-items: flex-start;
            }
        }
    }

    #currentLocation + .mud-input-control.mud-input-input-control {
        fieldset.mud-input-outlined-border {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    }

    #searchContainer {
        position: sticky;
        z-index: 1;
        margin: 0 auto;

        .mud-input-control {
            margin: 0;
        }

        .mud-input,
        .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
            font-size: 2vh; /* 1 rem is default */
        }

        .mud-icon-size-medium {
            font-size: 2.5vh;
        }
    }

    .focus:focus {
        outline: 2px solid var(--mud-palette-primary);
    }

    .mud-snackbar {
        min-width: 0;
    }

    .mud-icon-button.focus {
        border-radius: 0;
    }
</style>

<div style="@ContainerCss">
    <div class="controls-container">
        <div class="controls-inner-wrapper right pa-4">
            <MudStack Spacing="1" AlignItems="@AlignItems.End" Justify="@Justify.FlexEnd">
                <MudIconButton
                    Color="Color.Primary"
                    Class="action"
                    Icon="@MaterialSymbols.Outlined.Info"
                    OnClick="OpenAboutDialogAsync"/>
                <MudIconButton
                    Color="Color.Primary"
                    Class="action"
                    Icon="@MaterialSymbols.Outlined.Settings"
                    OnClick="OpenUserOptionsDialogAsync"/>
            </MudStack>
            <MudSpacer/>
            <MudStack Spacing="1" AlignItems="@AlignItems.End" Justify="@Justify.FlexEnd">
                <div class="badge-container">
                    <a href="https://discord.com/users/174617873182883841" target="_blank" rel="noopener noreferrer">
                        <div class="badge author">
                            <img src="@LinkHelper.GetPathToAsset("/img/created-by-badge.png")"
                                 alt="Created by Delta"/>
                        </div>
                    </a>
                </div>
                <div class="badge-container">
                    <a href="https://uexcorp.space/" target="_blank" rel="noopener noreferrer">
                        <div class="badge">
                            <img src="@LinkHelper.GetPathToAsset("/img/uex-api-badge-powered.png")"
                                 alt="Powered by UEX API"/>
                        </div>
                    </a>
                </div>
            </MudStack>
        </div>
    </div>
    <MudStack id="searchContainer" Class="d-flex justify-start align-center flex-grow-1 px-3">
        <div style="padding: 7.5vh"></div>
        <MudPaper Elevation="8"
                  Style="position: sticky; top: 0; z-index: 10; min-width: 60vw;">
            <MudStack Spacing="0"
                      AlignItems="@AlignItems.Center">
                <MudStack Spacing="0"
                          Class="w-100"
                          Row>
                    @if (_searchContext.CurrentLocation is { } currentLocation)
                    {
                        <KeyboardShortcutBadge Key="@KeyboardKey.F2"
                                               Origin="@Origin.BottomCenter"
                                               Color="@Color.Error"
                                               Class="d-flex"
                                               OnKeyPress="@(() => _searchContext.ClearLocationFilterAsync())">
                            <div class="h-100 px-4 d-flex align-center no-wrap"
                                 id="currentLocation"
                                 style="border: 1px solid var(--mud-palette-lines-inputs); border-radius: var(--mud-default-borderradius); border-top-right-radius: 0; border-bottom-right-radius: 0;">
                                <GameEntityNameLabel
                                    Model="@currentLocation.Name"/>
                            </div>
                        </KeyboardShortcutBadge>
                    }
                    <FocusRegion Class="w-100" @ref="_searchBoxFocusRegion">
                        <KeyboardShortcutBadge Key="@KeyboardKey.Escape"
                                               Origin="@(Origin.BottomCenter)"
                                               Color="@(context.ContainsFocus ? Color.Error : Color.Tertiary)"
                                               Class="w-100"
                                               OnKeyPress="@(FocusSearchBoxAsync)">
                            <MudTextField
                                id="searchBox"
                                @ref="_searchBox"
                                T="string"
                                Style="border-bottom-left-radius: 0; border-top-left-radius: 0"
                                @bind-Value="@SearchText"
                                Variant="Variant.Outlined"
                                Adornment="@Adornment.End"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                AdornmentColor="@Color.Secondary"
                                DebounceInterval="180"
                                OnDebounceIntervalElapsed="@SearchAsync"
                                AutoFocus
                                Immediate/>
                        </KeyboardShortcutBadge>
                    </FocusRegion>
                </MudStack>
                <MudText Typo="@Typo.overline" Class="text-secondary px-3">
                    @ShortcutsText
                </MudText>
            </MudStack>
        </MudPaper>

        <CascadingValue Value="@_searchContext" IsFixed>
            @if (SearchResults.GameEntities.Count > 0)
            {
                <MudChip T="string" Variant="@Variant.Text">
                    Found @SearchResults.GameEntities.Count results in @SearchResults.SearchTime.Humanize()
                </MudChip>

                <QuickAccessContainer QuerySelector=".search-result-container">
                    <MudStack Class="mt-10 w-100" Style="width: fit-content; min-width: 60vw;">
                        <MudVirtualize Items="@SearchResults.GameEntities" ItemSize="66" Enabled Context="result">
                            <SearchResult
                                @key="@result.Subject.GetHashCode()"
                                Model="@result.Subject"/>
                            @* <div>@result.ScoreTotal</div> *@
                            @* @foreach (var resultMatch in result.Matches) *@
                            @* { *@
                            @*     <div>@resultMatch</div> *@
                            @* } *@
                            @* @foreach (var unmatchedQueries in result.UnmatchedQueries) *@
                            @* { *@
                            @*     <div style="color: red">@unmatchedQueries</div> *@
                            @* } *@
                        </MudVirtualize>
                    </MudStack>
                </QuickAccessContainer>
            }
        </CascadingValue>

    </MudStack>
</div>

@code
{

    private const StringSplitOptions SplittingOptions
        = StringSplitOptions.RemoveEmptyEntries
          | StringSplitOptions.TrimEntries;

    private static CancellationTokenSource _searchCancellation = new();
    private static MudTextField<string>? _searchBox;

    private readonly Dictionary<string, EntityCategorySearch> _categorySearchShortcuts = new()
    {
        [":i"] = new EntityCategorySearch(GameEntityCategory.Item),
        [":c"] = new EntityCategorySearch(GameEntityCategory.Commodity),
        [":s"] = new EntityCategorySearch(GameEntityCategory.SpaceShip),
        [":g"] = new EntityCategorySearch(GameEntityCategory.GroundVehicle),
        [":l"] = new EntityCategorySearch(GameEntityCategory.Location),
        [":f"] = new EntityCategorySearch(GameEntityCategory.Company),
    };

    private OverlaySearchContext _searchContext = new();
    private FocusRegion? _searchBoxFocusRegion;

    private string ContainerCss
        => $"min-height: 100vh; {ContainerBlurCss}";

    private string ContainerBlurCss
        => UserPreferencesProvider.CurrentPreferences.BlurBackground
            ? "backdrop-filter: blur(12px);"
            : "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _searchContext = new OverlaySearchContext
        {
            ConfigChanged = EventCallback.Factory.Create<OverlaySearchContext>(this, OnSearchContextChange),
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var windowFocusHandler = EventInterop.CreateHandler(FocusSearchBoxAsync);
            await EventInterop.RegisterWindowEventHandlerAsync("focus", windowFocusHandler);
        }
    }

    private async Task OnSearchContextChange(OverlaySearchContext newContext)
    {
        await SearchAsync();
        await InvokeAsync(StateHasChanged);
    }

    private string ShortcutsText
        => new StringBuilder().AppendJoin(", ", _categorySearchShortcuts.Select(search => $"{search.Key} {search.Value.Category.Humanize().Pluralize()}")).ToString();

    private string SearchText { get; set; } = "";

    private GameEntitySearchResults SearchResults { get; set; } = GameEntitySearchResults.Empty;

    private async Task SearchAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SearchText))
            {
                Logger.LogDebug("Search text is empty, no search performed");
                SearchResults = GameEntitySearchResults.Empty;
                return;
            }

            var searchQueries = SearchText.Split(' ', SplittingOptions)
                .Select(searchPart => searchPart.StartsWith(':')
                    ? _categorySearchShortcuts.GetValueOrDefault(searchPart.ToLower()) ?? EmptySearch.Instance
                    : TextSearch.Fuzzy(searchPart)
                )
                .Where(search => search is not EmptySearch)
                .ToList();

            if (_searchContext.CurrentLocation is { } location)
            {
                searchQueries.Add(new LocationSearch(location));
            }

            await _searchCancellation.CancelAsync();
            _searchCancellation = new CancellationTokenSource();
            await GlobalAnalyticsReporter.TrackEventAsync(new SearchEvent(SearchText));
            SearchResults = await SearchService.SearchAsync(searchQueries, _searchCancellation.Token);
            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            // search has been cancelled (possibly by another search)
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during search");
        }
    }

    private async Task OpenUserOptionsDialogAsync()
        => await UserPreferencesEditDialog.ShowAsync(DialogService);

    private async Task OpenAboutDialogAsync()
        => await AboutDialog.ShowAsync(DialogService);

    private async Task FocusSearchBoxAsync()
    {
        if (_searchBoxFocusRegion?.HasFocus == true)
        {
            await OverlayControls.HideAsync();
        }
        else
        {
            if (_searchBox is not null)
            {
                await _searchBox.SelectAsync();
            }
        }
    }
}
