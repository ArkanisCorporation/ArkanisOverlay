@using Arkanis.Overlay.Components.Views.Components
@using Arkanis.Overlay.Domain.Abstractions.Game
@using Arkanis.Overlay.Domain.Enums
@using Arkanis.Overlay.Domain.Models.Search
@using Arkanis.Overlay.External.UEX.Abstractions
@inject ISearchService SearchService
@inject IGameEntityRepository<GameTradeRoute> TradeRouteRepository

<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    .mud-main-content .mud-paper,
    .mud-main-content .mud-expansion-panels {
        animation: 250ms fadeInDown;
    }

    :not(:hover) * .visible-on-parent-hover {
        display: none;
    }

    .mud-tabs-tabbar-content {
        overflow: visible !important;
    }

    .mud-tabs-tabbar-content .mud-badge.mud-badge-top.center.mud-badge-overlap {
        bottom: calc(100% - 8px);
    }

    .mud-tabs-tabbar .mud-tabs-scroll-button {
        display: none;
    }

    .mud-tabs-tabbar-wrapper {
        display: flex !important;
        width: 100% !important;
        transform: none !important;
    }

    .mud-tabs-tabbar-wrapper .mud-badge-root {
        width: 100%;
    }

    .mud-tabs-tabbar-wrapper > * {
        flex: 1;
    }
</style>

<div>
    <MudStack Spacing="6"
              Justify="@Justify.FlexStart"
              AlignItems="@AlignItems.Center">
        <div style="padding: 2vh"></div>
        <MudPaper Style="position: sticky; top: 0; z-index: 100; min-width: 60vw"
                  Elevation="4"
                  Class="py-2 px-4">
            <MudGrid>
                <MudItem xs="12" md="3">
                    <MudTextField
                        @bind-Value="@_cargoCapacity"
                        InputType="@InputType.Number"
                        DebounceInterval="200"
                        OnDebounceIntervalElapsed="RefreshDataAsync"
                        Label="Cargo capacity"
                        Placeholder="Used ship capacity"
                        Clearable/>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudTextField
                        @bind-Value="@_searchText"
                        DebounceInterval="200"
                        OnDebounceIntervalElapsed="RefreshDataAsync"
                        Label="Search"
                        Placeholder="Item or commodity name"
                        Clearable/>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudSelect @bind-Value="_selectedLocation"
                               @bind-Value:after="RefreshDataAsync"
                               Label="Location"
                               Placeholder="Select a game location"
                               Clearable>
                        @foreach (var location in AllLocations)
                        {
                            <MudSelectItem Value="@location">
                                @location.Name.MainContent.FullName
                            </MudSelectItem>
                        }
                        @if (AllLocations.Count == 0)
                        {
                            <div class="relative">
                                <MudProgressLinear
                                    Class="absolute"
                                    Indeterminate/>
                            </div>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudStack Spacing="3">
            @foreach (var route in FilteredRoutes)
            {
                var priceOrigin = route.Origin.Price;
                var priceDestination = route.Destination.Price;
                var scuReachable = _cargoCapacity > 0
                    ? Math.Min(_cargoCapacity.Value, route.Origin.CargoUnitsAvailable)
                    : route.Origin.CargoUnitsAvailable;

                <MudPaper Class="px-4 py-2 focus" tabindex="0">
                    <div style="display: grid; grid-template-columns: 4fr 1fr 1fr 1fr 4fr min-content;">
                        <div style="grid-column: 1">
                            <TradeRouteParty
                                Model="@route.Origin"
                                Route="@route"
                                Side="@TradeRouteParty.PartySide.Origin"
                                Spacing="6"/>
                        </div>
                        <div style="grid-column: 2">
                            <MudStack Justify="@Justify.Center"
                                      AlignItems="@AlignItems.End"
                                      Class="text-right h-100"
                                      Spacing="0">
                                <MudText Typo="Typo.inherit" Color="@Color.Error">
                                    <GamePriceLabel
                                        Model="@(priceOrigin * scuReachable)"
                                        Decimals="1"/>
                                </MudText>
                            </MudStack>
                        </div>
                        <div style="grid-column: 3">
                            <MudStack AlignItems="@AlignItems.Center"
                                      Class="mx-6"
                                      Spacing="0">
                                <MudText Typo="@Typo.body2" Class="my-n1 no-wrap text-secondary">
                                    <GameEntityNameLabel
                                        Typo="@Typo.inherit"
                                        Model="@route.Commodity.Name"
                                        Style="height: initial"
                                        PreferCode/>
                                </MudText>
                                <MudIcon
                                    Icon="@Icons.Material.Filled.ArrowRightAlt"
                                    Size="@Size.Large"
                                    Class="my-n1"/>
                                @if (route.Distance is { } distance)
                                {
                                    <MudText Typo="@Typo.body2"
                                             Class="my-n1 no-wrap">
                                        @distance Gm
                                    </MudText>
                                }
                            </MudStack>
                        </div>
                        <div style="grid-column: 4">
                            <MudStack Justify="@Justify.Center"
                                      AlignItems="@AlignItems.End"
                                      Class="text-right h-100"
                                      Spacing="0">
                                <MudText Typo="Typo.inherit">
                                    <GamePriceLabel
                                        Model="@(priceDestination * scuReachable)"
                                        Decimals="1"/>
                                </MudText>
                                <MudText Typo="Typo.inherit"
                                         Color="@Color.Success"
                                         Class="no-wrap">
                                    <GamePriceLabel
                                        Model="@(priceDestination * scuReachable - priceOrigin * scuReachable)"
                                        Prefix="+"
                                        Decimals="1"/>
                                </MudText>
                            </MudStack>
                        </div>
                        <div style="grid-column: 5">
                            <TradeRouteParty
                                Model="@route.Destination"
                                Route="@route"
                                Side="@TradeRouteParty.PartySide.Destination"
                                Class="flex-grow-1"
                                Spacing="6"/>
                        </div>
                        <div style="grid-column: 6">
                            <MudStack Spacing="2"
                                      AlignItems="@AlignItems.Center"
                                      Justify="@Justify.FlexEnd"
                                      Class="h-100 ml-3 mr-n2"
                                      Row>

                                <MudDivider
                                    FlexItem
                                    Vertical/>

                                <MudTooltip
                                    Text="@("Show matching results within/at")"
                                    Placement="@Placement.Top">
                                    <MudIconButton
                                        Icon="@Icons.Material.Filled.AirlineStops"
                                        Class="focus"
                                        tabindex="1"/>
                                </MudTooltip>
                            </MudStack>
                        </div>
                    </div>
                </MudPaper>
            }
        </MudStack>
    </MudStack>
</div>

@code
{
    private string _searchText = string.Empty;
    private int? _cargoCapacity;
    private IGameLocation? _selectedLocation;

    public ICollection<IGameLocation> AllLocations { get; set; } = [];

    public ICollection<CommodityRouteDTO> AllRoutes { get; set; } = [];
    public GameTradeRoute[] FilteredRoutes { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var results = await SearchService.SearchAsync([new EntityCategorySearch(GameEntityCategory.Location)]);
        AllLocations = results.GameEntities
            .Select(x => x.Subject)
            .OfType<IGameLocation>()
            .Where(x => x is not GameStarSystem)
            .ToArray();

        await RefreshDataAsync();
    }

    private async Task RefreshDataAsync()
    {
        FilteredRoutes = await TradeRouteRepository.GetAllAsync()
            .Where(x => _selectedLocation is null || _selectedLocation.Contains(x.Origin.Terminal) || _selectedLocation.Contains(x.Destination.Terminal))
            .Where(x => x.Destination.Price > x.Origin.Price)
            .OrderByDescending(x => x.PriceReturnOnInvestmentPercent * x.Origin.Price.Amount)
            .Take(10)
            .ToArrayAsync();
    }
}
