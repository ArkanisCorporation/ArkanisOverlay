@using Arkanis.Overlay.Components.Views.Trade.Components
@inject IGameEntityRepository<GameTradeRoute> TradeRouteRepository

<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    .mud-paper,
    .mud-expansion-panels {
        animation: 250ms fadeInDown;
    }

    .mud-expand-panel-text {
        max-width: calc(100% - 24px); /* -24px for the header toggle button */
    }

    .mud-expand-panel:not(:last-child).mud-expand-panel-border {
        border-bottom: 1px solid var(--mud-palette-lines-default) !important;
    }

    .mud-stepper {
        .mud-stepper-content > .d-flex[role="group"] {
            min-height: 30vh;
        }
    }

    .trade-runs {
        .mud-expand-panel-content {
            padding-bottom: 0;
        }

        .mud-expand-panel.mud-panel-expanded {
            margin-bottom: 0;
            margin-top: 0;
        }
    }

    .trade-runs .stages {
        .mud-card-actions.mud-stepper-actions {
            display: none;
        }
    }
</style>

<MudContainer>
    <MudPaper>
        <div class="pa-4">
            <MudStack AlignItems="@AlignItems.Center"
                      Class="mr-4"
                      Row>
                <MudChip
                    T="int"
                    Value="4"
                    Color="@Color.Info"/>
                <MudText Typo="@Typo.h4">
                    Trades In Progress
                </MudText>
            </MudStack>
            <MudText Typo="@Typo.body1"
                     Style="max-width: 100%;"
                     Class="px-2">
                All of the items below have been added during a recent play session.
                However, they have not yet been assigned a permanent storage within the universe.
                Please review the inventory table below and either remove or transfer the entries to
                a designated permanent storage.
            </MudText>
        </div>
        <MudDivider/>
        <MudExpansionPanels Gutters="false"
                            Class="trade-runs">
            @{ var panelIndex = 0; }
            @foreach (var tradeRun in TradeRuns.Take(4))
            {
                <MudExpansionPanel Gutters="false"
                                   Expanded="@(panelIndex++ == 0)">
                    <TitleContent>
                        <TradeRunPanelTitle
                            TradeRun="tradeRun"
                            TradeRunChanged="@OnTradeRunChanged"/>
                    </TitleContent>
                    <ChildContent>
                        <MudDivider/>
                        <TradeRunPanelContent
                            TradeRun="tradeRun"
                            TradeRunChanged="@OnTradeRunChanged"/>
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </MudPaper>
</MudContainer>

@code
{

    private List<TradeRun> TradeRuns { get; } = [];

    public GameTradeRoute[] Routes { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Routes = await TradeRouteRepository.GetAllAsync()
            .Where(x => x.Destination.Price > x.Origin.Price)
            .ToArrayAsync();

        foreach (var tradeRoute in Routes.Take(4))
        {
            TradeRuns.Add(TradeRun.Create(tradeRoute));
        }
    }

    private async Task OnTradeRunChanged()
    {
        // TODO: persist trade run changes
        await InvokeAsync(StateHasChanged);
    }
}
