@using Arkanis.Overlay.Domain.Abstractions.Game
@using MudBlazor.Utilities
<MudStep Title="@StepTitle"
         Style="@_style"
         Completed="@IsCompleted"
         Disabled="@IsDisabled">
    <MudStack AlignItems="@AlignItems.Center"
              Justify="@Justify.Center"
              Spacing="6">
        <MudStack AlignItems="AlignItems.Center"
                  Spacing="0">
            <MudText Typo="@Typo.h5">
                @Title
            </MudText>
            <MudText Typo="@Typo.body2">
                @Description
            </MudText>
        </MudStack>
        <GameEntityNameLabel
            Model="@Location.Name"/>
        <MudButton StartIcon="@MaterialIcons.Filled.FlightLand"
                   OnClick="@OnReachedClick"
                   Color="@Color.Success"
                   Size="@Size.Large">
            I am at the location
        </MudButton>
    </MudStack>
</MudStep>

@code
{

    private const string StyleBase = "background-size: cover; background-blend-mode: overlay;";

    private string _style = string.Empty;

    private bool IsCompleted
        => Model.ReachedAt is not null;

    private bool IsDisabled
        => IsCompleted;

    [CascadingParameter]
    public MudStepper? StepperReference { get; set; }

    [Parameter]
    [EditorRequired]
    public required TradeRun.Stage Model { get; set; }

    [Parameter]
    [EditorRequired]
    public required IGameLocation Location { get; set; }

    [Parameter]
    public string Title { get; set; } = "Travel";

    [Parameter]
    public string Description { get; set; } = "Travel to the target location at";

    [Parameter]
    public string StepTitle { get; set; } = "Travel";

    private async Task NextStepAsync()
    {
        if (StepperReference is not null)
        {
            await StepperReference.NextStepAsync();
        }
    }

    protected override void OnParametersSet()
    {
        _style = StyleBuilder.Default(StyleBase)
            .AddStyle("background-color", "rgba(0,0,0,0.75)", Location.ImageUrl is not null)
            .AddStyle("background-image", $"url({Location.ImageUrl})")
            .Build();

        base.OnParametersSet();
    }

    private async Task OnReachedClick()
    {
        Model.ReachedAt = DateTimeOffset.Now;
        await NextStepAsync();
    }
}
