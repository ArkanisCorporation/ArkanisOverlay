@using Arkanis.Overlay.Domain.Abstractions.Game
@inherits TradeRunStageComponent<TradeRun.SaleStage>

<MudStep Title="@Title"
         Completed="@IsCompleted"
         Disabled="@IsDisabled">
    <MudStack AlignItems="@AlignItems.Center"
              Justify="@Justify.Center"
              Spacing="6">
        <MudStack AlignItems="AlignItems.Center"
                  Spacing="0">
            <MudText Typo="@Typo.h5">
                @StepTitle
            </MudText>
            <MudText Typo="@Typo.body2">
                @Description
            </MudText>
        </MudStack>
        <GameEntityNameLabel
            Model="@PreferredLocation.Name"/>
        @if (IsPostTrade && Stage.CargoTransferAutomatic)
        {
            <MudNumericField
                Label="Transfer fee"
                Format="N0"
                @bind-Value="@Stage.CargoTransferFee.Amount"
                @bind-Value:after="@UpdateStageAsync"
                Adornment="@Adornment.Start"
                AdornmentText="@GameCurrency.Symbol"
                Class="flex-grow-0"
                Immediate/>
            <MudButton StartIcon="@MaterialIcons.Filled.Forklift"
                       OnClick="@OnTransferredClick"
                       Color="@Color.Success"
                       Size="@Size.Large"
                       Disabled="@IsDisabled">
                The cargo transfer has finished
            </MudButton>
        }
        else
        {
            <MudCheckBox @bind-Value="@Stage.CargoTransferAutomatic"
                         @bind-Value:after="@UpdateStageAsync">
                <MudStack Spacing="0">
                    <MudText>
                        I will use auto-load
                    </MudText>
                </MudStack>
            </MudCheckBox>
            @if (Stage.CargoTransferAutomatic)
            {
                <MudButton StartIcon="@MaterialSymbols.Outlined.GarageDoor"
                           OnClick="@OnTransferredClick"
                           Color="@Color.Success"
                           Size="@Size.Large"
                           Disabled="@IsDisabled">
                    I have the ship stored
                </MudButton>
            }
            else
            {
                <MudButton StartIcon="@MaterialIcons.Filled.Forklift"
                           OnClick="@OnTransferredClick"
                           Color="@Color.Success"
                           Size="@Size.Large"
                           Disabled="@IsConfirmDisabled">
                    I have unloaded the cargo
                </MudButton>
            }
        }
    </MudStack>
</MudStep>

@code
{

    private bool IsCompleted
        => Stage.TransferredAt is not null;

    private bool IsDisabled
        => IsCompleted
           || (!Stage.CargoTransferAutomatic && IsPostTrade)
           || Stage.FinalizedAt is not null;

    private bool IsConfirmDisabled
        => IsDisabled
           || Stage is { CargoTransferAutomatic: true, CargoTransferFee.Amount: 0 };

    private IGameLocation PreferredLocation
        => PreferParentLocation
            ? Location.ParentLocation ?? Location
            : Location;

    [Parameter]
    [EditorRequired]
    public required IGameLocation Location { get; set; }

    [Parameter]
    public string Title { get; set; } = "Load cargo";

    [Parameter]
    public string Description { get; set; } = "Load purchased cargo to your ship at";

    [Parameter]
    public string StepTitle { get; set; } = "Load";

    [Parameter]
    public bool IsPostTrade { get; set; }

    [Parameter]
    public bool PreferParentLocation { get; set; }

    protected override Task UpdateStageAsync()
    {
        if (!Stage.CargoTransferAutomatic)
        {
            Stage.CargoTransferFee.Amount = 0;
        }

        return base.UpdateStageAsync();
    }

    private async Task OnTransferredClick()
    {
        if (!Stage.CargoTransferAutomatic || IsPostTrade)
        {
            Stage.TransferredAt = DateTimeOffset.Now;
        }

        await NextStepAsync();
    }

}
