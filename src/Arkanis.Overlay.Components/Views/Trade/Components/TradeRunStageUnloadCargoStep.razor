@using Arkanis.Overlay.Domain.Abstractions.Game
<MudStep Title="@Title"
         Completed="@IsCompleted"
         Disabled="@IsDisabled">
    <MudStack AlignItems="@AlignItems.Center"
              Justify="@Justify.Center"
              Spacing="6">
        <MudStack AlignItems="AlignItems.Center"
                  Spacing="0">
            <MudText Typo="@Typo.h5">
                @StepTitle
            </MudText>
            <MudText Typo="@Typo.body2">
                @Description
            </MudText>
        </MudStack>
        <GameEntityNameLabel
            Model="@Location.Name"/>
        @if (IsPostTrade && Model.UsedAutoload)
        {
            <MudButton StartIcon="@MaterialIcons.Filled.Forklift"
                       OnClick="@OnTransferredClick"
                       Color="@Color.Success"
                       Size="@Size.Large">
                The cargo transfer has finished
            </MudButton>
        }
        else
        {
            <MudCheckBox @bind-Value="@Model.UsedAutoload"
                         @bind-Value:after="@UpdateAsync">
                <MudStack Spacing="0">
                    <MudText>
                        I will use auto-load
                    </MudText>
                </MudStack>
            </MudCheckBox>
            @if (Model.UsedAutoload)
            {
                <MudButton StartIcon="@MaterialSymbols.Outlined.GarageDoor"
                           OnClick="@OnTransferredClick"
                           Color="@Color.Success"
                           Size="@Size.Large">
                    I have the ship stored
                </MudButton>
            }
            else
            {
                <MudButton StartIcon="@MaterialIcons.Filled.Forklift"
                           OnClick="@OnTransferredClick"
                           Color="@Color.Success"
                           Size="@Size.Large">
                    I have unloaded the cargo
                </MudButton>
            }
        }
    </MudStack>
</MudStep>

@code
{

    private bool IsCompleted
        => Model.TransferredAt is not null;

    private bool IsDisabled
        => IsCompleted || (!Model.UsedAutoload && IsPostTrade);

    [CascadingParameter]
    public MudStepper? StepperReference { get; set; }

    [Parameter]
    [EditorRequired]
    public required TradeRun.Stage Model { get; set; }

    [Parameter]
    public EventCallback<TradeRun.Stage> ModelChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public required IGameLocation Location { get; set; }

    [Parameter]
    public string Title { get; set; } = "Load cargo";

    [Parameter]
    public string Description { get; set; } = "Load purchased cargo to your ship at";

    [Parameter]
    public string StepTitle { get; set; } = "Load";

    [Parameter]
    public bool IsPostTrade { get; set; }

    private async Task NextStepAsync()
    {
        if (StepperReference is not null)
        {
            await StepperReference.NextStepAsync();
        }
    }

    private async Task UpdateAsync()
        => await ModelChanged.InvokeAsync(Model);

    private async Task OnTransferredClick()
    {
        if (!Model.UsedAutoload || IsPostTrade)
        {
            Model.TransferredAt = DateTimeOffset.Now;
        }

        await NextStepAsync();
    }

}
