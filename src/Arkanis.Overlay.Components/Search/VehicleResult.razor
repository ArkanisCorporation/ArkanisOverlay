@using Arkanis.Common
@using Arkanis.Overlay.Infrastructure.Data
@using Arkanis.Overlay.Infrastructure.Data.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@inject UEXContext UEXContext
@inject ILogger<Index> Logger

<MudPaper Style="width: 100%" Class="search-result px-4 py-2 focus" tabindex="0">
    <MudStack Row="true" Style="width: 100%"
              Class="justify-center align-center align-content-center">
        <MudIcon Icon="@VehicleIcon"></MudIcon>
        <MudDivider Vertical="true" FlexItem="true"></MudDivider>
        <h1 class="flex-1">@Vehicle.NameFull</h1>
        <MudStack Style="width: 8em; color: lightskyblue;" AlignItems="AlignItems.Center" Spacing="2">
            <p>Avg. Buy:</p>
            @if (_avgBuyPrice == 0)
            {
                <p>—</p>
            }
            else
            {
                <p>@_avgBuyPrice.ToString("N0") @ApplicationConstants.CurrencyAbbr</p>
            }
        </MudStack>
        <MudStack Style="width: 8em; color: sandybrown;" AlignItems="AlignItems.Center" Spacing="2">
            <p>Avg. Rent:</p>
            @if (_avgRentPrice == 0)
            {
                <p>—</p>
            }
            else
            {
                <p>@_avgRentPrice.ToString("N0") @ApplicationConstants.CurrencyAbbr</p>
            }
        </MudStack>
        <MudDivider Vertical="true" FlexItem="true"></MudDivider>
        <MudIconButton Icon="@MaterialSymbols.Outlined.AddShoppingCart" Class="focus"
                       tabindex="1">
        </MudIconButton>
        <MudDivider Vertical="true" FlexItem="true"></MudDivider>
        <MudIconButton Icon="@MaterialSymbols.Outlined.CarRental" Class="focus"
                       tabindex="1">
        </MudIconButton>
    </MudStack>
</MudPaper>

@code {
    [Parameter] public required VehicleEntity Vehicle { get; set; }
    private string VehicleIcon { get; set; } = Icons.Material.Outlined.Rocket;
    private List<VehiclesPurchasesPricesAllEntity> _prices = [];
    private List<VehiclesRentalsPricesAllEntity> _rentals = [];

    private decimal _avgBuyPrice;
    private decimal _avgRentPrice;

    private decimal GetAvgBuyPrice() => _prices.Count == 0 ? 0 : _prices.Average(price => price.PriceBuy);
    private decimal GetAvgRentPrice() => _rentals.Count == 0 ? 0 : _rentals.Average(price => price.PriceRent);

    protected override async Task OnInitializedAsync()
    {
        _prices = await UEXContext.VehiclesPurchasesPricesAll
            .Where(price => price.IdVehicle == Vehicle.Id)
            .ToListAsync().ConfigureAwait(false);
        _avgBuyPrice = GetAvgBuyPrice();
        StateHasChanged();

        _rentals = await UEXContext.VehiclesRentalsPricesAll
            .Where(price => price.IdVehicle == Vehicle.Id)
            .ToListAsync().ConfigureAwait(false);
        _avgRentPrice = GetAvgRentPrice();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        VehicleIcon =
            Vehicle.IsSpaceship ? Icons.Material.Outlined.Rocket : Icons.Material.Outlined.AirportShuttle;
    }

}