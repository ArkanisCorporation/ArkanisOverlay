@page "/"
@page "/overlay"
@using System.Text.RegularExpressions
@using ArkanisOverlay.Data.Entities.Overlay
@using ArkanisOverlay.Data.Enums
@using ArkanisOverlay.Data.Structs
@using ArkanisOverlay.Services
@using ArkanisOverlay.UI.Windows
@using Microsoft.Extensions.Logging
@layout OverlayLayout

@inject ILogger<Index> Logger
@inject ISearchService SearchService

<script>
    window.onkeydown = ev => {
        console.debug("KeyDown", ev);
        if (ev.key === "Escape") {
            DotNet.invokeMethodAsync("ArkanisOverlay", "ClickAwayHide");
        }

        // if (ev.keyCode >= 38 && ev.keyCode <= 40) {
        //     debugger;
        // }

        let target = ev.target;

        if (target.id === "searchBox") {
            if (ev.keyCode !== 40) {
                return;
            }

            document.querySelector('.search-result')?.focus();
        } else {
            let searchBox = document.getElementById('searchBox')

            switch (ev.keyCode) {
                case 38: // up
                    (ev.target.previousElementSibling || searchBox)?.focus();
                    break;
                case 40: // down
                    ev.target.nextElementSibling.focus();
                    break;

                case 37: // left
                    (
                        target.tabIndex === 1 ?
                            (
                                target.parentElement.querySelector('[tabindex="1"]:has(~ :focus)')
                                || target.closest('.search-result')
                            ) : searchBox
                    )?.focus();
                    break;

                case 39: // right
                    (
                        target.tabIndex === 0 ?
                            target.querySelector('[tabindex="1"]') :
                            target.parentElement.querySelector(':focus ~ [tabindex="1"]')
                    )?.focus();
                    break;

                case 13: // enter
                case 32: // space
                    if (target.id !== "searchBox") {
                        break;
                    }

                <!--suppress FallThroughInSwitchStatementJS -->
                default:
                    searchBox?.focus();
                    searchBox?.select();
                    return; // do not prevent default so that the search box receives the key input
            }
        }

        ev.preventDefault();
    };
</script>

<!--suppress CssUnusedSymbol, CssUnresolvedCustomProperty -->
<style>
    body {
        background-color: transparent;
    }

    #clickAwayBackground {
        position: absolute;
        /*top: 0;*/
        /*left: 0;*/
        width: 100%;
        height: 100%;
        /*background-color: #FF000030;*/
        overflow: hidden;
    }

    #searchContainer {
        position: relative;
        top: 20%;
        left: 50%;
        transform: translate(-50%, 0%);
        width: fit-content;
        z-index: 1;

        .mud-input-control {
            margin: 0;
            width: 60vw;
        }

        .mud-input,
        .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
            font-size: 2vh; /* 1 rem is default */
        }

        .mud-icon-size-medium {
            font-size: 2.5vh;
        }
    }

    .focus:focus {
        outline: 2px solid var(--mud-palette-primary);
    }

    .mud-snackbar {
        min-width: 0;
    }

    .mud-icon-button.focus {
        border-radius: 0;
    }
</style>

<div id="clickAwayBackground"
     onmousedown="if (event.target == this) DotNet.invokeMethodAsync('ArkanisOverlay', 'ClickAwayHide')">

    <div class="badge-container uex">
        <a href="https://uexcorp.space/" target="_blank" rel="noopener noreferrer">
            <div class="badge">
                <img src="assets/img/uex-api-badge-powered.png"
                     alt="Powered by UEX API Badge"/>
            </div>
        </a>
    </div>

    <div class="badge-container author">
        <a href="https://discord.com/users/174617873182883841" target="_blank" rel="noopener noreferrer">
            <div class="badge author">
                <img src="assets/img/created-by-badge.png"
                     alt="Powered by UEX API Badge"/>
            </div>
        </a>
    </div>
</div>

<MudStack id="searchContainer" Class="d-flex justify-center align-center flex-grow-1" Elevation="0">
    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
        <MudPaper>
            <MudTextField id="searchBox" @ref="SearchBox" T="string" @bind-Value="SearchText" Variant="Variant.Outlined"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Secondary"
                          HelperText=":c Commodities, :s Ships, :v Vehicles, :i Items, :l Locations"
                          AutoFocus="true"
                          Immediate="true"
                          DebounceInterval="300"
                          OnDebounceIntervalElapsed="@SearchAsync"/>
        </MudPaper>

        @if (SearchResults?.Any() == true)
        {
            <MudStack Class="mt-10" Style="width: 100%; min-height: 20vh;">
                @foreach (var result in SearchResults)
                {
                    <MudPaper Style="width: 100%" Class="search-result px-4 py-2 focus" tabindex="0">
                        <MudStack Row="true" Style="width: 100%"
                                  Class="justify-center align-center align-content-center">

                            @{
                                var entityIcon = result.EntityType switch
                                {
                                    EntityType.Commodity => Icons.Material.Outlined.Diamond,
                                    EntityType.Vehicle => Icons.Material.Outlined.AirportShuttle,
                                    EntityType.Item => Icons.Material.Outlined.Category,
                                    EntityType.SpaceShip => Icons.Material.Outlined.Rocket,
                                    // EntityType.Location => Icons.Material.Outlined.LocationOn,
                                    _ => throw new ArgumentOutOfRangeException()
                                };
                            }

                            <MudIcon Icon="@entityIcon"></MudIcon>
                            <MudDivider Vertical="true" FlexItem="true"></MudDivider>
                            <h1 class="flex-1">@result.Name</h1>

                            @foreach (var (priceType, price) in result.AveragePrices)
                            {
                                var color = priceType switch
                                {
                                    PriceType.Buy => "lightskyblue",
                                    PriceType.Sell => "sandybrown",
                                    PriceType.Rent => "sandybrown",
                                    _ => throw new ArgumentOutOfRangeException()
                                };

                                <MudStack Style=@($"width: 8em; color: {color};") AlignItems="AlignItems.Center"
                                          Spacing="2">
                                    <p>Avg. @priceType.ToString():</p>
                                    @if (price == 0)
                                    {
                                        <p>â€”</p>
                                    }
                                    else
                                    {
                                        <p>@price.ToString("N0") UEC</p>
                                    }
                                </MudStack>
                            }

                            @foreach (var (priceType, price) in result.AveragePrices)
                            {
                                var buttonIcon = priceType switch
                                {
                                    PriceType.Buy => MaterialSymbols.Outlined.AddShoppingCart,
                                    PriceType.Sell => MaterialSymbols.Outlined.RemoveShoppingCart,
                                    PriceType.Rent => MaterialSymbols.Outlined.CarRental,
                                    _ => throw new ArgumentOutOfRangeException()
                                };

                                <MudDivider Vertical="true" FlexItem="true"/>
                                <MudIconButton Icon="@buttonIcon" Class="focus" tabindex="1" Disabled=@(price == 0) />
                            }
                        </MudStack>
                    </MudPaper>

                    @* <MudListItem @key="@result.Name" Class="search-result" OnClick="@(() => OnResultClick(result))"> *@
                    @*     <MudText>@result.Name (@result.EntityType)</MudText> *@
                    @*     <MudText> *@
                    @*         @foreach (var price in result.AveragePrices) *@
                    @*         { *@
                    @*             <span class="mr-2">@price.Key: @price.Value.ToString("N0") aUEC</span> *@
                    @*         } *@
                    @*     </MudText> *@
                    @* </MudListItem> *@
                }

            </MudStack>
        }
    </MudFocusTrap>
</MudStack>

@code {
    public static MudTextField<string>? SearchBox { get; private set; }
    public string SearchText { get; set; } = "";
    private IEnumerable<SearchResult>? SearchResults { get; set; }
    
    [JSInvokable("ClickAwayHide")]
    public static void ClickAwayHide() => OverlayWindow.Instance?.Collapse();

    private async Task SearchAsync()
    {
        try
        {   
            if (string.IsNullOrWhiteSpace(SearchText))
            {
                SearchResults = null;
                return;
            }

            SearchResults = await SearchService.SearchAsync(SearchText).ConfigureAwait(false);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during search");
        }
    }

    // private async Task OnResultClick(SearchResult result)
    // {
    //     // var detailedPrices = await SearchService.GetDetailedPricesAsync(result.EntityType, result.Name).ConfigureAwait(false);
    //     // TODO: Show detailed prices in a dialog or expand the list item
    // }

    // private async Task OnSearchKeyDown(KeyboardEventArgs args)
    // {
    //     if (args.Key == "Enter" && SearchResults?.Any() == true)
    //     {
    //         // await OnResultClick(SearchResults.First()).ConfigureAwait(false);
    //     }
    // }
}